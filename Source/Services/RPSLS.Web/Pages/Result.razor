@layout ConsoleLayout
@page "/result"
@attribute [Authorize]

@inject IGameService Game
@inject SvgHelper svgHelper
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="result console-screen @resultStyle">
    <p class="console-text">@result.User</p>
    <div class="user-picks">
        <div class="user-picks-container">
            <div class="user-picks-items">
                <div class="user-hand">
                    <img src='@("/assets/images/png/hands/user/"+MapPick(result.UserPick)+".png")'>
                </div>
                <p class="pick-text">@MapPick(result.UserPick)</p>

                <p class="pick-text text-result">@resultMessage</p>
                @if (userIsWinner)
                {
                    <p class="pick-text text-message">@MapPick(result.UserPick) @GetAction() @MapPick(result.ChallengerPick)</p>
                }
            </div>
        </div>
    </div>
    <div class="custom-button-container">
        <div class="custom-button">
            <a class="custom-button-link" href="/battle">play again</a>
        </div>
    </div>
</div>
<div class="console-vs">
    <div class="vs-circle">
        <p class="vs-text">VS</p>
    </div>
</div>
<div class="result console-screen">
    <p class="console-text">@Game.Challenger?.DisplayName</p>
    <div class="challenger-picks">
        <div class="challenger-result challenger-picks-container">
            @if (result.IsValid)
            {
                <div>
                    <div class="opponent-hand">
                        <img src='@("/assets/images/png/hands/" + result.Challenger + "/" + result.ChallengerPick + ".png")' />
                    </div>
                    <p class="pick-text">@MapPick(result.ChallengerPick)</p>
                </div>
            }
            else if (error != null)
            {
                <div class="opponent-hand-error">
                    <h2>@error.Text</h2>
                    <img src='@("/assets/images/png/" + error.Image)'>
                </div>
            }
        </div>
    </div>
    <div class="custom-button-container">
        <div class="custom-button">
            <a class="custom-button-link challenger" href="/challenger">choose opponent</a>
        </div>
    </div>
</div>

@code
{
    ResultDto result = new ResultDto();
    string resultMessage = null;
    bool userIsWinner = false;
    string resultStyle = "";
    ChallengerErrorViewModel error = null;
    ChallengerErrorViewModel[] errors = new ChallengerErrorViewModel[]
    {
        new ChallengerErrorViewModel() { Name = "python", Text = "how did I get here?", Image = "node-error.png" },
        new ChallengerErrorViewModel() { Name = "node", Text = "oooops, I have to update the rocket", Image = "node-error.png" },
        new ChallengerErrorViewModel() { Name = "dotnet", Text = "how did I end here?", Image = "node-error.png" },
        new ChallengerErrorViewModel() { Name = "java", Text = "how did I end here?", Image = "node-error.png" },
        new ChallengerErrorViewModel() { Name = "php", Text = "how did I end here?", Image = "node-error.png" }
        };

    [CascadingParameter] ConsoleLayout Layout { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Layout.Initialize(title: "the battle", withHelp: true, hasToShowGithub: true);
        }
    }

    protected override void OnInitialized()
    {
        if (Game.GameResult == null)
        {
            NavigationManager.NavigateTo("/challenger");
            return;
        }
        result.UserPick = Game.Pick;
        result = Game.GameResult;

        resultMessage = CreateResult(result.Result);
        userIsWinner = result.Result == 1;
        resultStyle = GetResultClass(result.Result);
        error = errors.FirstOrDefault(c => c.Name == result.Challenger);
    }

    private string GetResultClass(int result)
    {
        return result switch
        {
            1 => "winner",
            2 => "loser",
            _ => ""
        };
    }

    private string CreateResult(int result)
    {
        return result switch
        {
            1 => "you win!!",
            2 => "you lose!!",
            _ => "tie!!"
        };
    }

    private static string MapPick(int pick)
    {
        return pick switch
        {
            0 => "rock",
            1 => "paper",
            2 => "scissors",
            3 => "lizard",
            4 => "spock",
            _ => "-"
        };
    }

    private string GetAction()
    {
        if (userIsWinner)
        {
            return MapAction(result.UserPick, result.ChallengerPick);
        };

        return MapAction(result.ChallengerPick, result.UserPick);
    }

    private static string MapAction(int winner, int loser)
    {
        return winner switch
        {
            0 => "crushes",
            1 => loser == 0 ? "covers" : "disproves",
            2 => loser == 1 ? "cuts" : "decapitates",
            3 => loser == 1 ? "eats" : "poisons",
            4 => loser == 0 ? "vaporizes" : "smashes",
            _ => "ties"
        };
    }
}
