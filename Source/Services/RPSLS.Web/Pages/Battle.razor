@layout ConsoleLayout
@page "/battle"
@attribute [Authorize]

@inject IGameService Game
@inject SvgHelper svgHelper
@inject BattleHelper battleHelper
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="console-screen">
    <p class="console-text">@Username</p>
    <div class="user-picks">
        <div class="user-picks-container">
            @if (battleToBeStarted)
            {
                <div class="pick active toplay">
                    <div class="pick-images @(shakeHand ? "shakingHand" : string.Empty)">
                        <img class="@(battleHelper.GetAnimatedClass(shakeHand)) placeholder" src="/assets/images/png/hands/user/rock.png">
                        <img class="pick @(battleHelper.GetAnimatedClass(shakeHand))" src="/assets/images/png/hands/user/@(battleHelper.GetHandIcon(userHandToShow)).png">
                        <img class="base" src="/assets/images/png/hands/user/base.png">
                    </div>
                </div>
            }
            else
            {
                @foreach (var pick in picks)
                {
                    var active = pick.Value == Game.Pick;
                    <div class="pick selectable @(active ? "active" : string.Empty)" @onclick="() => SelectPick(pick)">
                        <div class="pick-images"><img src='@("/assets/images/png/hands/user/"+pick.Image+".png")'></div>
                        <p class="pick-text">@pick.Text</p>
                    </div>
                    @if (pick.BreakAfter)
                    {
                        <div class="break"></div>
                    }
                }
            }
        </div>
    </div>
    <div class="cam-content">
        <div class="cam-button"><a class="cam-link" href="/cambattle">use webcam</a></div>
    </div>
</div>

@if (Game.Pick == -1 || battleToBeStarted)
{
    <div class="console-vs">
        <div class="vs-circle">
            <p class="vs-text">VS</p>
        </div>
    </div>
}
else
{
    <div class="console-vs">
        <div class="start-battle-circle" @onclick="async () => await StartBattle()">
            <p class="start-battle-text">start</p>
            <p class="start-battle-text">battle</p>
        </div>
    </div>
}
<div class="console-screen">
    <p class="console-text">@Game.Challenger?.DisplayName</p>
    <div class="challenger-picks">
        <div class="challenger-player challenger-picks-container">
            @if (battleToBeStarted)
            {
                <div style="transform: scaleX(-1)" class="pick active toplay">
                    <div class="pick-images @(shakeHand ? "shakingHand" : string.Empty)">
                        <img class="@(battleHelper.GetAnimatedClass(shakeHand)) placeholder" src="/assets/images/png/hands/@Game.Challenger.Name/0.png">
                        @if (Game.GameResult != null)
                        {
                            <img class="pick @(battleHelper.GetAnimatedClass(shakeHand))" src="/assets/images/png/hands/@Game.Challenger.Name/@(battleHelper.GetHandIcon(Game.GameResult.ChallengerPick)).png">
                        }
                        <img class="base bot" src="/assets/images/png/hands/@Game.Challenger.Name/base.png">
                    </div>
                </div>
            }
            else
            {
                @if (Game.Challenger != null)
                {
                    <img src='@("/assets/images/png/"+Game.Challenger.Name+".png")'>
                }
            }
        </div>
    </div>
</div>


@code
{
    [CascadingParameter] ConsoleLayout Layout { get; set; }

    string Username = "-";
    bool battleToBeStarted = false;
    string userHandToShow = "";
    bool shakeHand = false;
    RPSLSViewModel pickedToPlay;
    RPSLSViewModel[] picks;
    bool isTwitterUser = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Layout.Initialize(title: "the battle", withHelp: true);
        }
    }

    protected override async Task OnInitializedAsync()
    {

        if (Game.Challenger == null)
        {
            NavigationManager.NavigateTo("/challenger");
        }

        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Username = state.User.Identity.Name;
        isTwitterUser = state.User.Identity.AuthenticationType == "Twitter";

        Game.Pick = -1;
        picks = new RPSLSViewModel[]
        {
            new RPSLSViewModel { Text = "Rock", Value = 0, Image = "rock" },
            new RPSLSViewModel { Text = "Paper", Value = 1, Image = "paper", BreakAfter = true },
            new RPSLSViewModel { Text = "Scissors", Value = 2, Image = "scissors" },
            new RPSLSViewModel { Text = "Lizard", Value = 3, Image = "lizard" },
            new RPSLSViewModel { Text = "Spock", Value = 4, Image = "spock", BreakAfter = true  }
                };
    }

    void SelectPick(RPSLSViewModel pick)
    {
        pickedToPlay = pick;
        Game.Pick = pick.Value;
    }

    private async Task ShakeHand()
    {
        battleToBeStarted = true;
        shakeHand = true;

        await Game.Play(Username, isTwitterUser);
        await Task.Delay(2000);
        shakeHand = false;
        userHandToShow = pickedToPlay.Image;
        StateHasChanged();
        await Task.Delay(2000);
    }

    async Task StartBattle()
    {
        await ShakeHand();
        NavigationManager.NavigateTo("/result");
    }
}
